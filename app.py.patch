import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))  # New client initialization

@app.route('/')

=======
from openai import OpenAI
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

client = OpenAI(
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
    api_base=os.getenv("AZURE_OPENAI_ENDPOINT"),
    api_type="azure",
    api_version=os.getenv("AZURE_OPENAI_API_VERSION")
)

@app.route('/')
>>>>>>> REPLACE

<<<<<<< SEARCH
@app.route('/chat', methods=['POST'])
def chat():
    try:
        user_message = request.json.get('message')
        
        response = client.chat.completions.create(  # Updated syntax
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_message}]
        )
        
        return jsonify({"response": response.choices[0].message.content})
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
=======
@app.route('/chat', methods=['POST'])
def chat():
    try:
        user_message = request.json.get('message')

        response = client.chat.completions.create(
            deployment_id=os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME"),
            messages=[{"role": "user", "content": user_message}]
        )

        return jsonify({"response": response.choices[0].message.content})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
